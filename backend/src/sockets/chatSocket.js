import Message from "../models/messageModel.js";

// –∫–∞—Ä—Ç–∞ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (userId ‚Üí socketId)
const onlineUsers = new Map();

export default function initChatSocket(io) {
  io.on("connection", (socket) => {
    console.log("üîå –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:", socket.id);

    // —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–Ω–ª–∞–π–Ω–µ
    socket.on("register", (userId) => {
      onlineUsers.set(userId, socket.id);
      console.log(` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–Ω–ª–∞–π–Ω`);
    });

    // —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on("message", async ({ sender, recipient, text }) => {
      try {
        const message = await Message.create({ sender, recipient, text });

        // –µ—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É
        const recipientSocket = onlineUsers.get(recipient.toString());
        if (recipientSocket) {
          io.to(recipientSocket).emit("message", message);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });

    // —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on("disconnect", () => {
      console.log(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:", socket.id);
      for (let [userId, sockId] of onlineUsers.entries()) {
        if (sockId === socket.id) {
          onlineUsers.delete(userId);
          break;
        }
      }
    });
  });
}
