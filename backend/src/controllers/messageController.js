import Message from "../models/messageModel.js";
import User from "../models/userModel.js";

// üì© –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
export const getMessages = async (req, res) => {
  try {
    const { userId } = req.params;    // id —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    const currentUserId = req.userId; // –∏–∑ middleware protect

    const messages = await Message.find({
      $or: [
        { sender: currentUserId, recipient: userId },
        { sender: userId, recipient: currentUserId },
      ],
    })
      .sort({ createdAt: 1 })
      .populate("sender recipient", "username avatar");

    res.json(messages);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π" });
  }
};

// üí¨ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserDialogs = async (req, res) => {
  try {
    const userId = req.userId; // –∏–∑ protect

    // –ù–∞–π—Ç–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
    const messages = await Message.find({
      $or: [{ sender: userId }, { recipient: userId }],
    }).sort({ createdAt: -1 });

    // –°–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    const dialogMap = new Map();

    for (const msg of messages) {
      const partnerId =
        msg.sender.toString() === userId.toString()
          ? msg.recipient.toString()
          : msg.sender.toString();

      if (!dialogMap.has(partnerId)) {
        dialogMap.set(partnerId, {
          lastMessage: msg.text,
          updatedAt: msg.createdAt,
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞—Ö
    const dialogs = await Promise.all(
      Array.from(dialogMap.entries()).map(async ([partnerId, info]) => {
        const user = await User.findById(partnerId).select("username avatar");
        if (!user) return null;
        return {
          _id: user._id,
          username: user.username,
          avatar: user.avatar,
          lastMessage: info.lastMessage,
          updatedAt: info.updatedAt,
        };
      })
    );

    res.json(dialogs.filter(Boolean)); // —É–±—Ä–∞—Ç—å null –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ getUserDialogs:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤" });
  }
};
